/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package restaurante.panes;

import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import restaurante.personalizacao.Personalizacoes;
import restaurante.personalizacao.CriarSubJanela;
import restaurante.rules.Permissoes;
import restaurante.rules.Search;
import restaurante.rules.Usuario;
import restaurante.rules.UsuarioManager;

/**
 *
 * @author User
 */
public class UserPanel extends javax.swing.JPanel {

    private final List<Permissoes> permissoes;
    private final String nomeUsuario;

    public UserPanel(List<Permissoes> permissoes, String nomeUsuario) {
        initComponents();
        this.permissoes = permissoes;
        this.nomeUsuario = nomeUsuario;
        personalizarInterface();
        Carregar();

    }

    private void Carregar() {
        String seta = "↓";
        usuarioButton.setText(nomeUsuario + seta);
        searchUser.setText("Procure por um nome ou usuário");
        searchUser.setForeground(Color.GRAY); // Deixa o placeholder cinza

        DefaultTableModel model = (DefaultTableModel) consultaTable.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        panelTableConsulta.setVisible(false);

    }

    private void personalizarInterface() {
        // Cores temáticas de restaurante
        Color secondaryColor = new Color(255, 243, 224); // Creme claro

        // Personaliza os labels
        //Personalizacoes.personalizarLabes(label, 32, true);
        // Personaliza o botão
        Personalizacoes.personalizarBotao(usuarioButton, 16, false, null, null);
        Personalizacoes.personalizarBotao(addUser, 16, true, null, null);
        Personalizacoes.personalizarBotao(deleteButton, 16, true, null, null);
        deleteButton.setVisible(false);

        // Personaliza os campos de entrada
        Personalizacoes.personalizarCampos(searchUser, 16, null, null);

        //Personalizar combobox
        Personalizacoes.personalizarComboBox(permissoesComboBox, 16, null, null);

        //Personalizar tabela
        JTableHeader header = consultaTable.getTableHeader();
        header.setForeground(Color.WHITE);
        header.setBackground(new Color(150, 40, 27)); // Tom vinho compatível com seleção
        header.setFont(new Font("Segoe UI", Font.BOLD, 16));
        ((DefaultTableCellRenderer) header.getDefaultRenderer())
                .setHorizontalAlignment(JLabel.CENTER);

        // Fundo do painel
        setBackground(secondaryColor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usuarioButton = new javax.swing.JButton();
        searchUser = new javax.swing.JTextField();
        permissoesComboBox = new javax.swing.JComboBox<>();
        addUser = new javax.swing.JButton();
        panelTableConsulta = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        consultaTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();

        usuarioButton.setText("Usuario");
        usuarioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioButtonActionPerformed(evt);
            }
        });

        searchUser.setToolTipText("");
        searchUser.setMinimumSize(new java.awt.Dimension(64, 30));
        searchUser.setPreferredSize(new java.awt.Dimension(64, 30));
        searchUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchUserKeyTyped(evt);
            }
        });

        permissoesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Administrador Master", "Administrativo", "Atendimento", "Cozinha", "Vendas" }));
        permissoesComboBox.setMinimumSize(new java.awt.Dimension(180, 30));
        permissoesComboBox.setPreferredSize(new java.awt.Dimension(180, 30));
        permissoesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permissoesComboBoxItemStateChanged(evt);
            }
        });

        addUser.setText("Adicionar Usuário");
        addUser.setMaximumSize(new java.awt.Dimension(31, 180));
        addUser.setMinimumSize(new java.awt.Dimension(31, 180));
        addUser.setPreferredSize(new java.awt.Dimension(31, 180));
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        panelTableConsulta.setBackground(new java.awt.Color(255, 243, 224));

        consultaTable.setBackground(new java.awt.Color(255, 220, 224));
        consultaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Selecionar", "Editar", "ID", "Nome", "Usuario", "Permissão"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        consultaTable.setGridColor(new java.awt.Color(255, 255, 255));
        consultaTable.setRowHeight(30);
        consultaTable.setSelectionBackground(new java.awt.Color(150, 40, 27));
        consultaTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(consultaTable);
        if (consultaTable.getColumnModel().getColumnCount() > 0) {
            consultaTable.getColumnModel().getColumn(0).setMinWidth(70);
            consultaTable.getColumnModel().getColumn(0).setPreferredWidth(70);
            consultaTable.getColumnModel().getColumn(0).setMaxWidth(70);
            consultaTable.getColumnModel().getColumn(1).setMinWidth(50);
            consultaTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            consultaTable.getColumnModel().getColumn(1).setMaxWidth(50);
            consultaTable.getColumnModel().getColumn(2).setMinWidth(150);
            consultaTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            consultaTable.getColumnModel().getColumn(2).setMaxWidth(150);
            consultaTable.getColumnModel().getColumn(4).setMinWidth(250);
            consultaTable.getColumnModel().getColumn(4).setPreferredWidth(250);
            consultaTable.getColumnModel().getColumn(4).setMaxWidth(250);
            consultaTable.getColumnModel().getColumn(5).setMinWidth(250);
            consultaTable.getColumnModel().getColumn(5).setPreferredWidth(250);
            consultaTable.getColumnModel().getColumn(5).setMaxWidth(250);
        }

        javax.swing.GroupLayout panelTableConsultaLayout = new javax.swing.GroupLayout(panelTableConsulta);
        panelTableConsulta.setLayout(panelTableConsultaLayout);
        panelTableConsultaLayout.setHorizontalGroup(
            panelTableConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        panelTableConsultaLayout.setVerticalGroup(
            panelTableConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
        );

        deleteButton.setText("Excluir");
        deleteButton.setMaximumSize(new java.awt.Dimension(31, 150));
        deleteButton.setMinimumSize(new java.awt.Dimension(31, 150));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTableConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(usuarioButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchUser, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(permissoesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                        .addComponent(addUser, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usuarioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(permissoesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(panelTableConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void usuarioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioButtonActionPerformed
        CriarSubJanela.subMenuLougout(usuarioButton, (JFrame) this.getTopLevelAncestor());
    }//GEN-LAST:event_usuarioButtonActionPerformed

    public List<Usuario> getUsuariosSelecionados() {
        DefaultTableModel model = (DefaultTableModel) consultaTable.getModel();
        List<Usuario> selecionados = new ArrayList<>();

        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isChecked = (Boolean) model.getValueAt(i, 0); // coluna 0 é o checkbox
            if (Boolean.TRUE.equals(isChecked)) {
                int id = (Integer) model.getValueAt(i, 2); // coluna 2 é o ID
                for (Usuario u : Search.getUsuariosEncontrados()) {
                    if (u.getID() == id) {
                        selecionados.add(u);
                        break;
                    }
                }
            }
        }
        return selecionados;
    }

    private void searchUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchUserKeyTyped
        Personalizacoes.placeHolderText(searchUser, "Procure por um nome ou usuário");
        Search.pesquisaTempoRealUsuario(panelTableConsulta, searchUser, permissoesComboBox, consultaTable, "Procure por um nome ou usuário");
        consultaTable.getModel().addTableModelListener(e -> verificarUsuariosSelecionados());
    }//GEN-LAST:event_searchUserKeyTyped

    private void permissoesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permissoesComboBoxItemStateChanged
        Search.pesquisaTempoRealUsuario(panelTableConsulta, searchUser, permissoesComboBox, consultaTable, "Procure por um nome ou usuário");
        consultaTable.getModel().addTableModelListener(e -> verificarUsuariosSelecionados());
    }//GEN-LAST:event_permissoesComboBoxItemStateChanged

    private void verificarUsuariosSelecionados() {
        DefaultTableModel model = (DefaultTableModel) consultaTable.getModel();
        boolean algumSelecionado = false;
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isChecked = (Boolean) model.getValueAt(i, 0);
            if (Boolean.TRUE.equals(isChecked)) {
                algumSelecionado = true;
                break;
            }
        }
        deleteButton.setVisible(algumSelecionado);
    }

    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        var cadastroUsuario = new CadastroUsuario(this.permissoes);
        CriarSubJanela.subJanelaPadrao(cadastroUsuario, 650, 450);
        Search.pesquisaTempoRealUsuario(panelTableConsulta, searchUser, permissoesComboBox, consultaTable, "Procure por um nome ou usuário");
        consultaTable.getModel().addTableModelListener(e -> verificarUsuariosSelecionados());
    }//GEN-LAST:event_addUserActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        List<Usuario> selecionados = getUsuariosSelecionados();
        UsuarioManager manager = new UsuarioManager();
        manager.carregarUsuarios();
        Personalizacoes mensagem = new Personalizacoes();

        int total = selecionados.size();
        int sucesso = 0;
        int falha = 0;

        for (Usuario u : selecionados) {
            System.out.println("Tentando remover: " + u.getNome());
            boolean removido = manager.removerUsuario(u);
            if (removido) {
                sucesso++;
            } else {
                falha++;
            }
        }

        // Mensagens personalizadas conforme o resultado
        if (sucesso == total) {
            mensagem.menssagemConfirma(this, sucesso + " usuário(s) excluído(s) com sucesso!", "Exclusão Bem-Sucedida", 270, 50);
            Search.pesquisaTempoRealUsuario(panelTableConsulta, searchUser, permissoesComboBox, consultaTable, "Procure por um nome ou usuário");
            consultaTable.getModel().addTableModelListener(e -> verificarUsuariosSelecionados());
        } else if (sucesso > 0) {
            mensagem.menssagemErro(this, sucesso + " usuário(s) excluído(s) com sucesso, mas houve falha ao excluir " + falha + " usuário(s).", "Exclusão Parcial", 350, 50);
            Search.pesquisaTempoRealUsuario(panelTableConsulta, searchUser, permissoesComboBox, consultaTable, "Procure por um nome ou usuário");
            consultaTable.getModel().addTableModelListener(e -> verificarUsuariosSelecionados());
        } else {
            mensagem.menssagemErro(this, "Erro na exclusão de todos os usuários selecionados.", "Falha de Exclusão", 300, 50);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUser;
    private javax.swing.JTable consultaTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelTableConsulta;
    private javax.swing.JComboBox<String> permissoesComboBox;
    private javax.swing.JTextField searchUser;
    private javax.swing.JButton usuarioButton;
    // End of variables declaration//GEN-END:variables
}
