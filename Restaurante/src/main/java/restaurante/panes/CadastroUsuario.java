/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package restaurante.panes;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;
import restaurante.personalizacao.Personalizacoes;
import restaurante.rules.Permissoes;
import restaurante.rules.Usuario;
import restaurante.rules.UsuarioManager;

/**
 *
 * @author User
 */
public class CadastroUsuario extends javax.swing.JPanel {

    private final List<Permissoes> permissoes;
    private List<Permissoes> permissao = new ArrayList<>();;

    public CadastroUsuario(List<Permissoes> permissoes) {
        initComponents();
        this.permissoes = permissoes;
        this.permissao = new ArrayList<>();
        permissoes();
        personalizarInterface();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nomeInput = new javax.swing.JTextField();
        usuarioInput = new javax.swing.JTextField();
        confirmarSenhaInput = new javax.swing.JPasswordField();
        senhaInput = new javax.swing.JPasswordField();
        masterCheckBox = new javax.swing.JCheckBox();
        administradorCheckBox = new javax.swing.JCheckBox();
        atendimentoCheckBox = new javax.swing.JCheckBox();
        vendasCheckBox = new javax.swing.JCheckBox();
        cozinhaCheckBox = new javax.swing.JCheckBox();
        nomeLabel = new javax.swing.JLabel();
        usuarioLabel = new javax.swing.JLabel();
        senhaLabel = new javax.swing.JLabel();
        confirmarSenhaLabel = new javax.swing.JLabel();
        confirmarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();

        nomeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nomeInputKeyTyped(evt);
            }
        });

        usuarioInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usuarioInputKeyTyped(evt);
            }
        });

        confirmarSenhaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                confirmarSenhaInputKeyTyped(evt);
            }
        });

        senhaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                senhaInputKeyTyped(evt);
            }
        });

        masterCheckBox.setText("Administrador Master");

        administradorCheckBox.setText("Administrador");

        atendimentoCheckBox.setText("Atendimento");

        vendasCheckBox.setText("Vendas");

        cozinhaCheckBox.setText("Cozinha");

        nomeLabel.setText("Nome Completo");

        usuarioLabel.setText("Usu√°rio:");

        senhaLabel.setText("Senha:");

        confirmarSenhaLabel.setText("Confirmar senha:");

        confirmarButton.setText("Confirmar");
        confirmarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usuarioLabel)
                    .addComponent(nomeLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(usuarioInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(nomeInput, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(senhaLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(confirmarSenhaLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(senhaInput, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(confirmarSenhaInput, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(administradorCheckBox)
                    .addComponent(masterCheckBox)
                    .addComponent(cozinhaCheckBox)
                    .addComponent(vendasCheckBox)
                    .addComponent(atendimentoCheckBox))
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmarButton)
                .addGap(53, 53, 53)
                .addComponent(cancelarButton)
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nomeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usuarioLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usuarioInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(senhaLabel)
                        .addGap(9, 9, 9)
                        .addComponent(senhaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(confirmarSenhaLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(administradorCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atendimentoCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vendasCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cozinhaCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(masterCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmarSenhaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmarButton)
                    .addComponent(cancelarButton))
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void confirmarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarButtonActionPerformed
        String senha = new String(senhaInput.getPassword());
        String confirmarSenha = new String(confirmarSenhaInput.getPassword());
        String nome = nomeInput.getText();
        String usuario = usuarioInput.getText();
        Personalizacoes mensagem = new Personalizacoes();

        if (masterCheckBox.isSelected()) {
            permissao.add(Permissoes.MASTER);
        }
        if (administradorCheckBox.isSelected()) {
            permissao.add(Permissoes.ADMINISTRADOR);
        }
        if (atendimentoCheckBox.isSelected()) {
            permissao.add(Permissoes.ATENDIMENTO);
        }
        if (vendasCheckBox.isSelected()) {
            permissao.add(Permissoes.VENDAS);
        }
        if (cozinhaCheckBox.isSelected()) {
            permissao.add(Permissoes.COZINHA);
        }

        if (!senha.equals(confirmarSenha)) {
            mensagem.menssagemErro(this, "As senhas n√£o s√£o iguais!", "Erro no Cadastro",240,50);
            return;
        }
        if (senha.equals("")) {
            mensagem.menssagemErro(this, "Senha n√£o pode estar em branco!", "Erro no Cadastro",240,50);
            return;
        }
        if (nome.equals("")) {
            mensagem.menssagemErro(this, "Informe o nome do usu√°rio!", "Erro no Cadastro",240,50);
            return;
        }
        if (usuario.equals("")) {
            mensagem.menssagemErro(this, "Informe o usuario para login!", "Erro no Cadastro",240,50);
            return;
        }
        if (!masterCheckBox.isSelected() && !administradorCheckBox.isSelected() && !atendimentoCheckBox.isSelected() && !vendasCheckBox.isSelected() && !cozinhaCheckBox.isSelected()) {
            mensagem.menssagemErro(this, "Nenhuma permiss√£o selecionada para o usu√°rio!", "Erro no Cadastro",260,50);
            return;
        }

        UsuarioManager manager = new UsuarioManager();
        Usuario newUsuario = new Usuario(manager.atribuirID(), nome, usuario, senha, permissao);
        manager.adicionarUsuario(newUsuario);
        mensagem.menssagemConfirma(this, "Usu√°rio cadastrado com sucesso!", "Sucesso no Cadastro",260,50);
        
        java.awt.Window window = SwingUtilities.getWindowAncestor(this);
        if (window != null) {
            window.dispose();
        }
    }//GEN-LAST:event_confirmarButtonActionPerformed

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        java.awt.Window window = SwingUtilities.getWindowAncestor(this);
        if (window != null) {
            window.dispose();
        }
    }//GEN-LAST:event_cancelarButtonActionPerformed

    private void nomeInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeInputKeyTyped
        Personalizacoes.placeHolderText(nomeInput, "Insira o nome completo");
    }//GEN-LAST:event_nomeInputKeyTyped

    private void usuarioInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuarioInputKeyTyped
        Personalizacoes.placeHolderText(usuarioInput, "Insira o usu√°rio");
    }//GEN-LAST:event_usuarioInputKeyTyped

    private void senhaInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_senhaInputKeyTyped
        Personalizacoes.placeHolderPassword(senhaInput, "Insira a senha");
    }//GEN-LAST:event_senhaInputKeyTyped

    private void confirmarSenhaInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmarSenhaInputKeyTyped
        Personalizacoes.placeHolderPassword(confirmarSenhaInput, "Confirme a senha");
    }//GEN-LAST:event_confirmarSenhaInputKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox administradorCheckBox;
    private javax.swing.JCheckBox atendimentoCheckBox;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JButton confirmarButton;
    private javax.swing.JPasswordField confirmarSenhaInput;
    private javax.swing.JLabel confirmarSenhaLabel;
    private javax.swing.JCheckBox cozinhaCheckBox;
    private javax.swing.JCheckBox masterCheckBox;
    private javax.swing.JTextField nomeInput;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JPasswordField senhaInput;
    private javax.swing.JLabel senhaLabel;
    private javax.swing.JTextField usuarioInput;
    private javax.swing.JLabel usuarioLabel;
    private javax.swing.JCheckBox vendasCheckBox;
    // End of variables declaration//GEN-END:variables

    private void personalizarInterface() {
        //PlaceHolders
        nomeInput.setText("Insira o nome completo");
        nomeInput.setForeground(Color.GRAY); // Deixa o placeholder cinza
        usuarioInput.setText("Insira o usu√°rio");
        usuarioInput.setForeground(Color.GRAY); // Deixa o placeholder cinza
        senhaInput.setText("Insira a senha");
        senhaInput.setForeground(Color.GRAY);
        senhaInput.setEchoChar((char) 0); // Remove a m√°scara para exibir o placeholder
        confirmarSenhaInput.setText("Confirme a senha");
        confirmarSenhaInput.setForeground(Color.GRAY);
        confirmarSenhaInput.setEchoChar((char) 0); // Remove a m√°scara para exibir o placeholder
        
        Color secondaryColor = new Color(255, 243, 224); // Creme claro
        Personalizacoes.personalizarCampos(nomeInput, 16, null, null);
        Personalizacoes.personalizarCampos(usuarioInput, 16, null, null);
        Personalizacoes.personalizarCampos(senhaInput, 16, null, null);
        Personalizacoes.personalizarCampos(confirmarSenhaInput, 16, null, null);
        Personalizacoes.personalizarLabes(nomeLabel, 16, false);
        Personalizacoes.personalizarLabes(usuarioLabel, 16, false);
        Personalizacoes.personalizarLabes(senhaLabel, 16, false);
        Personalizacoes.personalizarLabes(confirmarSenhaLabel, 16, false);
        Personalizacoes.personalizarBotao(confirmarButton, 16, true, null, null);
        Personalizacoes.personalizarBotao(cancelarButton, 16, true, null, null);
        Personalizacoes.personalizarBotao(confirmarButton, 16, true, null, null);
        Personalizacoes.personalizarCheckBox(masterCheckBox, 16);
        Personalizacoes.personalizarCheckBox(administradorCheckBox, 16);
        Personalizacoes.personalizarCheckBox(atendimentoCheckBox, 16);
        Personalizacoes.personalizarCheckBox(vendasCheckBox, 16);
        Personalizacoes.personalizarCheckBox(cozinhaCheckBox, 16);
        setBackground(secondaryColor);
    }

    private void permissoes() {
        if (!permissoes.contains(Permissoes.ADMINISTRADOR) && !permissoes.contains(Permissoes.ATENDIMENTO)) {
            atendimentoCheckBox.setEnabled(false);
        } else if (!permissoes.contains(Permissoes.ADMINISTRADOR) && !permissoes.contains(Permissoes.VENDAS)) {
            vendasCheckBox.setEnabled(false);
        } else if (!permissoes.contains(Permissoes.ADMINISTRADOR) && !permissoes.contains(Permissoes.COZINHA)) {
            cozinhaCheckBox.setEnabled(false);
        }
        if (!permissoes.contains(Permissoes.ADMINISTRADOR) && !permissoes.contains(Permissoes.ATENDIMENTO) && !permissoes.contains(Permissoes.VENDAS) && !permissoes.contains(Permissoes.COZINHA)) {
            administradorCheckBox.setEnabled(false);
        } else {
            administradorCheckBox.setEnabled(true);
            cozinhaCheckBox.setEnabled(true);
            vendasCheckBox.setEnabled(true);
            atendimentoCheckBox.setEnabled(true);
        }
        if (!permissoes.contains(Permissoes.MASTER)) {
            masterCheckBox.setVisible(false);
        } else {
            administradorCheckBox.setEnabled(true);
            atendimentoCheckBox.setEnabled(true);
            vendasCheckBox.setEnabled(true);
            cozinhaCheckBox.setEnabled(true);
        }
    }
}
